//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Bayron/RiderProjects/compiladores/MiniCSharpParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="MiniCSharpParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IMiniCSharpParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] MiniCSharpParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.usingDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUsingDirective([NotNull] MiniCSharpParser.UsingDirectiveContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.qualifiedIdent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQualifiedIdent([NotNull] MiniCSharpParser.QualifiedIdentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarDecl([NotNull] MiniCSharpParser.VarDeclContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClassDecl([NotNull] MiniCSharpParser.ClassDeclContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMethodDecl([NotNull] MiniCSharpParser.MethodDeclContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.formPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFormPars([NotNull] MiniCSharpParser.FormParsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType([NotNull] MiniCSharpParser.TypeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DesignatorStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDesignatorStatement([NotNull] MiniCSharpParser.DesignatorStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] MiniCSharpParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStatement([NotNull] MiniCSharpParser.ForStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] MiniCSharpParser.WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSwitchStatement([NotNull] MiniCSharpParser.SwitchStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BreakStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreakStatement([NotNull] MiniCSharpParser.BreakStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] MiniCSharpParser.ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ReadStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReadStatement([NotNull] MiniCSharpParser.ReadStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWriteStatement([NotNull] MiniCSharpParser.WriteStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlockStatement([NotNull] MiniCSharpParser.BlockStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>EmptyStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEmptyStatement([NotNull] MiniCSharpParser.EmptyStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.switchCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSwitchCase([NotNull] MiniCSharpParser.SwitchCaseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.defaultCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDefaultCase([NotNull] MiniCSharpParser.DefaultCaseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant([NotNull] MiniCSharpParser.ConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] MiniCSharpParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.actPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitActPars([NotNull] MiniCSharpParser.ActParsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCondition([NotNull] MiniCSharpParser.ConditionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.condTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCondTerm([NotNull] MiniCSharpParser.CondTermContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.condFact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCondFact([NotNull] MiniCSharpParser.CondFactContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.cast"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCast([NotNull] MiniCSharpParser.CastContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr([NotNull] MiniCSharpParser.ExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTerm([NotNull] MiniCSharpParser.TermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DesignatorFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDesignatorFactor([NotNull] MiniCSharpParser.DesignatorFactorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NumberFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberFactor([NotNull] MiniCSharpParser.NumberFactorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CharFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCharFactor([NotNull] MiniCSharpParser.CharFactorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StringFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringFactor([NotNull] MiniCSharpParser.StringFactorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BoolFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBoolFactor([NotNull] MiniCSharpParser.BoolFactorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NewFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNewFactor([NotNull] MiniCSharpParser.NewFactorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParenFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenFactor([NotNull] MiniCSharpParser.ParenFactorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.designator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDesignator([NotNull] MiniCSharpParser.DesignatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumber([NotNull] MiniCSharpParser.NumberContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelop([NotNull] MiniCSharpParser.RelopContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.addop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddop([NotNull] MiniCSharpParser.AddopContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCSharpParser.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMulop([NotNull] MiniCSharpParser.MulopContext context);
}
} // namespace generated
