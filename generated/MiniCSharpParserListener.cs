//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Volumes/macOs/rooseveltalej/Documents/Compiladores/MiniCSharpParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MiniCSharpParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IMiniCSharpParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] MiniCSharpParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] MiniCSharpParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDecl([NotNull] MiniCSharpParser.VarDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDecl([NotNull] MiniCSharpParser.VarDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassDecl([NotNull] MiniCSharpParser.ClassDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassDecl([NotNull] MiniCSharpParser.ClassDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodDecl([NotNull] MiniCSharpParser.MethodDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodDecl([NotNull] MiniCSharpParser.MethodDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.formPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormPars([NotNull] MiniCSharpParser.FormParsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.formPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormPars([NotNull] MiniCSharpParser.FormParsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] MiniCSharpParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] MiniCSharpParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DesignatorStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDesignatorStatement([NotNull] MiniCSharpParser.DesignatorStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DesignatorStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDesignatorStatement([NotNull] MiniCSharpParser.DesignatorStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] MiniCSharpParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] MiniCSharpParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] MiniCSharpParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] MiniCSharpParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] MiniCSharpParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] MiniCSharpParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatement([NotNull] MiniCSharpParser.SwitchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatement([NotNull] MiniCSharpParser.SwitchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BreakStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStatement([NotNull] MiniCSharpParser.BreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BreakStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStatement([NotNull] MiniCSharpParser.BreakStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] MiniCSharpParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] MiniCSharpParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReadStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadStatement([NotNull] MiniCSharpParser.ReadStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReadStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadStatement([NotNull] MiniCSharpParser.ReadStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteStatement([NotNull] MiniCSharpParser.WriteStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteStatement([NotNull] MiniCSharpParser.WriteStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStatement([NotNull] MiniCSharpParser.BlockStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStatement([NotNull] MiniCSharpParser.BlockStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EmptyStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyStatement([NotNull] MiniCSharpParser.EmptyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EmptyStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyStatement([NotNull] MiniCSharpParser.EmptyStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.switchCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchCase([NotNull] MiniCSharpParser.SwitchCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.switchCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchCase([NotNull] MiniCSharpParser.SwitchCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.defaultCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefaultCase([NotNull] MiniCSharpParser.DefaultCaseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.defaultCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefaultCase([NotNull] MiniCSharpParser.DefaultCaseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] MiniCSharpParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] MiniCSharpParser.ConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] MiniCSharpParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] MiniCSharpParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.actPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterActPars([NotNull] MiniCSharpParser.ActParsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.actPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitActPars([NotNull] MiniCSharpParser.ActParsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondition([NotNull] MiniCSharpParser.ConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondition([NotNull] MiniCSharpParser.ConditionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.condTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondTerm([NotNull] MiniCSharpParser.CondTermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.condTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondTerm([NotNull] MiniCSharpParser.CondTermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.condFact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondFact([NotNull] MiniCSharpParser.CondFactContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.condFact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondFact([NotNull] MiniCSharpParser.CondFactContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.cast"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCast([NotNull] MiniCSharpParser.CastContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.cast"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCast([NotNull] MiniCSharpParser.CastContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] MiniCSharpParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] MiniCSharpParser.ExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm([NotNull] MiniCSharpParser.TermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm([NotNull] MiniCSharpParser.TermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DesignatorFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDesignatorFactor([NotNull] MiniCSharpParser.DesignatorFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DesignatorFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDesignatorFactor([NotNull] MiniCSharpParser.DesignatorFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NumberFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberFactor([NotNull] MiniCSharpParser.NumberFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NumberFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberFactor([NotNull] MiniCSharpParser.NumberFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CharFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharFactor([NotNull] MiniCSharpParser.CharFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CharFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharFactor([NotNull] MiniCSharpParser.CharFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StringFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringFactor([NotNull] MiniCSharpParser.StringFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StringFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringFactor([NotNull] MiniCSharpParser.StringFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BoolFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolFactor([NotNull] MiniCSharpParser.BoolFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolFactor([NotNull] MiniCSharpParser.BoolFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NewFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewFactor([NotNull] MiniCSharpParser.NewFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NewFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewFactor([NotNull] MiniCSharpParser.NewFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenFactor([NotNull] MiniCSharpParser.ParenFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenFactor([NotNull] MiniCSharpParser.ParenFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.designator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDesignator([NotNull] MiniCSharpParser.DesignatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.designator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDesignator([NotNull] MiniCSharpParser.DesignatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumber([NotNull] MiniCSharpParser.NumberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumber([NotNull] MiniCSharpParser.NumberContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelop([NotNull] MiniCSharpParser.RelopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelop([NotNull] MiniCSharpParser.RelopContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.addop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddop([NotNull] MiniCSharpParser.AddopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.addop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddop([NotNull] MiniCSharpParser.AddopContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulop([NotNull] MiniCSharpParser.MulopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.mulop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulop([NotNull] MiniCSharpParser.MulopContext context);
}
} // namespace generated
