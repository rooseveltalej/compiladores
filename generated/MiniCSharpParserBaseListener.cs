//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Volumes/macOs/rooseveltalej/Documents/Compiladores/MiniCSharpParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMiniCSharpParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class MiniCSharpParserBaseListener : IMiniCSharpParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] MiniCSharpParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] MiniCSharpParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.usingDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUsingDirective([NotNull] MiniCSharpParser.UsingDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.usingDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUsingDirective([NotNull] MiniCSharpParser.UsingDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.qualifiedIdent"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQualifiedIdent([NotNull] MiniCSharpParser.QualifiedIdentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.qualifiedIdent"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQualifiedIdent([NotNull] MiniCSharpParser.QualifiedIdentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.varDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVarDecl([NotNull] MiniCSharpParser.VarDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.varDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVarDecl([NotNull] MiniCSharpParser.VarDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.classDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassDecl([NotNull] MiniCSharpParser.ClassDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.classDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassDecl([NotNull] MiniCSharpParser.ClassDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.methodDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodDecl([NotNull] MiniCSharpParser.MethodDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.methodDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodDecl([NotNull] MiniCSharpParser.MethodDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.formPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormPars([NotNull] MiniCSharpParser.FormParsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.formPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormPars([NotNull] MiniCSharpParser.FormParsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] MiniCSharpParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] MiniCSharpParser.TypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DesignatorStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDesignatorStatement([NotNull] MiniCSharpParser.DesignatorStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DesignatorStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDesignatorStatement([NotNull] MiniCSharpParser.DesignatorStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] MiniCSharpParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] MiniCSharpParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStatement([NotNull] MiniCSharpParser.ForStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStatement([NotNull] MiniCSharpParser.ForStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] MiniCSharpParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] MiniCSharpParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSwitchStatement([NotNull] MiniCSharpParser.SwitchStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSwitchStatement([NotNull] MiniCSharpParser.SwitchStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BreakStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBreakStatement([NotNull] MiniCSharpParser.BreakStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BreakStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBreakStatement([NotNull] MiniCSharpParser.BreakStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] MiniCSharpParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] MiniCSharpParser.ReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ReadStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReadStatement([NotNull] MiniCSharpParser.ReadStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ReadStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReadStatement([NotNull] MiniCSharpParser.ReadStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWriteStatement([NotNull] MiniCSharpParser.WriteStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWriteStatement([NotNull] MiniCSharpParser.WriteStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockStatement([NotNull] MiniCSharpParser.BlockStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockStatement([NotNull] MiniCSharpParser.BlockStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>EmptyStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmptyStatement([NotNull] MiniCSharpParser.EmptyStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>EmptyStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmptyStatement([NotNull] MiniCSharpParser.EmptyStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.switchCase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSwitchCase([NotNull] MiniCSharpParser.SwitchCaseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.switchCase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSwitchCase([NotNull] MiniCSharpParser.SwitchCaseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.defaultCase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefaultCase([NotNull] MiniCSharpParser.DefaultCaseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.defaultCase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefaultCase([NotNull] MiniCSharpParser.DefaultCaseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstant([NotNull] MiniCSharpParser.ConstantContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstant([NotNull] MiniCSharpParser.ConstantContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] MiniCSharpParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] MiniCSharpParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.actPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterActPars([NotNull] MiniCSharpParser.ActParsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.actPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitActPars([NotNull] MiniCSharpParser.ActParsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondition([NotNull] MiniCSharpParser.ConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondition([NotNull] MiniCSharpParser.ConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.condTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondTerm([NotNull] MiniCSharpParser.CondTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.condTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondTerm([NotNull] MiniCSharpParser.CondTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.condFact"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondFact([NotNull] MiniCSharpParser.CondFactContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.condFact"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondFact([NotNull] MiniCSharpParser.CondFactContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.cast"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCast([NotNull] MiniCSharpParser.CastContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.cast"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCast([NotNull] MiniCSharpParser.CastContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr([NotNull] MiniCSharpParser.ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr([NotNull] MiniCSharpParser.ExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm([NotNull] MiniCSharpParser.TermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm([NotNull] MiniCSharpParser.TermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DesignatorFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDesignatorFactor([NotNull] MiniCSharpParser.DesignatorFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DesignatorFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDesignatorFactor([NotNull] MiniCSharpParser.DesignatorFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NumberFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberFactor([NotNull] MiniCSharpParser.NumberFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NumberFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberFactor([NotNull] MiniCSharpParser.NumberFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CharFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCharFactor([NotNull] MiniCSharpParser.CharFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CharFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCharFactor([NotNull] MiniCSharpParser.CharFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StringFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringFactor([NotNull] MiniCSharpParser.StringFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StringFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringFactor([NotNull] MiniCSharpParser.StringFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BoolFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolFactor([NotNull] MiniCSharpParser.BoolFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolFactor([NotNull] MiniCSharpParser.BoolFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NewFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewFactor([NotNull] MiniCSharpParser.NewFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NewFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewFactor([NotNull] MiniCSharpParser.NewFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenFactor([NotNull] MiniCSharpParser.ParenFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenFactor([NotNull] MiniCSharpParser.ParenFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.designator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDesignator([NotNull] MiniCSharpParser.DesignatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.designator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDesignator([NotNull] MiniCSharpParser.DesignatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.number"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumber([NotNull] MiniCSharpParser.NumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.number"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumber([NotNull] MiniCSharpParser.NumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.relop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelop([NotNull] MiniCSharpParser.RelopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.relop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelop([NotNull] MiniCSharpParser.RelopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.addop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddop([NotNull] MiniCSharpParser.AddopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.addop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddop([NotNull] MiniCSharpParser.AddopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.mulop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMulop([NotNull] MiniCSharpParser.MulopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.mulop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMulop([NotNull] MiniCSharpParser.MulopContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace generated
