//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Volumes/macOs/rooseveltalej/Documents/Compiladores/MiniCSharpLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniCSharpLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, FOR=5, WHILE=6, BREAK=7, RETURN=8, READ=9, 
		WRITE=10, NEW=11, TRUE=12, FALSE=13, SWITCH=14, CASE=15, DEFAULT=16, ASSIGN=17, 
		PLUS=18, MINUS=19, MULT=20, DIV=21, MOD=22, EQUAL=23, NOTEQUAL=24, LT=25, 
		LE=26, GT=27, GE=28, AND=29, OR=30, INC=31, DEC=32, LPAREN=33, RPAREN=34, 
		LBRACE=35, RBRACE=36, LBRACK=37, RBRACK=38, SEMI=39, COMMA=40, DOT=41, 
		COLON=42, INTCONST=43, DOUBLECONST=44, CHARCONST=45, STRINGCONST=46, IDENT=47, 
		WS=48, LINE_COMMENT=49, BLOCK_COMMENT=50, CM_START=51, CM_END=52, CM_TEXT=53;
	public const int
		CM_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "CM_MODE"
	};

	public static readonly string[] ruleNames = {
		"CLASS", "VOID", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", "READ", 
		"WRITE", "NEW", "TRUE", "FALSE", "SWITCH", "CASE", "DEFAULT", "ASSIGN", 
		"PLUS", "MINUS", "MULT", "DIV", "MOD", "EQUAL", "NOTEQUAL", "LT", "LE", 
		"GT", "GE", "AND", "OR", "INC", "DEC", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "COLON", "INTCONST", "DOUBLECONST", 
		"CHARCONST", "STRINGCONST", "IDENT", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
		"LETTER", "DIGIT", "ESC_SEQ", "CM_START", "CM_END", "CM_TEXT"
	};


	public MiniCSharpLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniCSharpLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'for'", "'while'", "'break'", 
		"'return'", "'read'", "'write'", "'new'", "'true'", "'false'", "'switch'", 
		"'case'", "'default'", "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
		"'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'++'", "'--'", 
		"'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", "':'", 
		null, null, null, null, null, null, null, null, null, "'*/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", 
		"READ", "WRITE", "NEW", "TRUE", "FALSE", "SWITCH", "CASE", "DEFAULT", 
		"ASSIGN", "PLUS", "MINUS", "MULT", "DIV", "MOD", "EQUAL", "NOTEQUAL", 
		"LT", "LE", "GT", "GE", "AND", "OR", "INC", "DEC", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "COLON", 
		"INTCONST", "DOUBLECONST", "CHARCONST", "STRINGCONST", "IDENT", "WS", 
		"LINE_COMMENT", "BLOCK_COMMENT", "CM_START", "CM_END", "CM_TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSharpLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,53,355,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
		2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,
		1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,
		3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
		9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
		1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
		1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,
		1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,
		1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
		1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,
		5,42,266,8,42,10,42,12,42,269,9,42,3,42,271,8,42,1,43,4,43,274,8,43,11,
		43,12,43,275,1,43,1,43,4,43,280,8,43,11,43,12,43,281,1,44,1,44,1,44,3,
		44,287,8,44,1,44,1,44,1,45,1,45,1,45,5,45,294,8,45,10,45,12,45,297,9,45,
		1,45,1,45,1,46,1,46,1,46,5,46,304,8,46,10,46,12,46,307,9,46,1,47,4,47,
		310,8,47,11,47,12,47,311,1,47,1,47,1,48,1,48,1,48,1,48,5,48,320,8,48,10,
		48,12,48,323,9,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,
		51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,
		54,1,54,1,54,1,55,1,55,1,55,1,55,0,0,56,2,1,4,2,6,3,8,4,10,5,12,6,14,7,
		16,8,18,9,20,10,22,11,24,12,26,13,28,14,30,15,32,16,34,17,36,18,38,19,
		40,20,42,21,44,22,46,23,48,24,50,25,52,26,54,27,56,28,58,29,60,30,62,31,
		64,32,66,33,68,34,70,35,72,36,74,37,76,38,78,39,80,40,82,41,84,42,86,43,
		88,44,90,45,92,46,94,47,96,48,98,49,100,50,102,0,104,0,106,0,108,51,110,
		52,112,53,2,0,1,8,1,0,49,57,2,0,39,39,92,92,2,0,34,34,92,92,3,0,9,10,13,
		13,32,32,2,0,10,10,13,13,3,0,65,90,95,95,97,122,1,0,48,57,7,0,34,34,39,
		39,92,92,98,98,110,110,114,114,116,116,361,0,2,1,0,0,0,0,4,1,0,0,0,0,6,
		1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,
		0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,
		1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,
		0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,
		1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,
		0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,
		1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,
		0,0,84,1,0,0,0,0,86,1,0,0,0,0,88,1,0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,
		1,0,0,0,0,96,1,0,0,0,0,98,1,0,0,0,0,100,1,0,0,0,1,108,1,0,0,0,1,110,1,
		0,0,0,1,112,1,0,0,0,2,114,1,0,0,0,4,120,1,0,0,0,6,125,1,0,0,0,8,128,1,
		0,0,0,10,133,1,0,0,0,12,137,1,0,0,0,14,143,1,0,0,0,16,149,1,0,0,0,18,156,
		1,0,0,0,20,161,1,0,0,0,22,167,1,0,0,0,24,171,1,0,0,0,26,176,1,0,0,0,28,
		182,1,0,0,0,30,189,1,0,0,0,32,194,1,0,0,0,34,202,1,0,0,0,36,204,1,0,0,
		0,38,206,1,0,0,0,40,208,1,0,0,0,42,210,1,0,0,0,44,212,1,0,0,0,46,214,1,
		0,0,0,48,217,1,0,0,0,50,220,1,0,0,0,52,222,1,0,0,0,54,225,1,0,0,0,56,227,
		1,0,0,0,58,230,1,0,0,0,60,233,1,0,0,0,62,236,1,0,0,0,64,239,1,0,0,0,66,
		242,1,0,0,0,68,244,1,0,0,0,70,246,1,0,0,0,72,248,1,0,0,0,74,250,1,0,0,
		0,76,252,1,0,0,0,78,254,1,0,0,0,80,256,1,0,0,0,82,258,1,0,0,0,84,260,1,
		0,0,0,86,270,1,0,0,0,88,273,1,0,0,0,90,283,1,0,0,0,92,290,1,0,0,0,94,300,
		1,0,0,0,96,309,1,0,0,0,98,315,1,0,0,0,100,326,1,0,0,0,102,332,1,0,0,0,
		104,334,1,0,0,0,106,336,1,0,0,0,108,339,1,0,0,0,110,345,1,0,0,0,112,351,
		1,0,0,0,114,115,5,99,0,0,115,116,5,108,0,0,116,117,5,97,0,0,117,118,5,
		115,0,0,118,119,5,115,0,0,119,3,1,0,0,0,120,121,5,118,0,0,121,122,5,111,
		0,0,122,123,5,105,0,0,123,124,5,100,0,0,124,5,1,0,0,0,125,126,5,105,0,
		0,126,127,5,102,0,0,127,7,1,0,0,0,128,129,5,101,0,0,129,130,5,108,0,0,
		130,131,5,115,0,0,131,132,5,101,0,0,132,9,1,0,0,0,133,134,5,102,0,0,134,
		135,5,111,0,0,135,136,5,114,0,0,136,11,1,0,0,0,137,138,5,119,0,0,138,139,
		5,104,0,0,139,140,5,105,0,0,140,141,5,108,0,0,141,142,5,101,0,0,142,13,
		1,0,0,0,143,144,5,98,0,0,144,145,5,114,0,0,145,146,5,101,0,0,146,147,5,
		97,0,0,147,148,5,107,0,0,148,15,1,0,0,0,149,150,5,114,0,0,150,151,5,101,
		0,0,151,152,5,116,0,0,152,153,5,117,0,0,153,154,5,114,0,0,154,155,5,110,
		0,0,155,17,1,0,0,0,156,157,5,114,0,0,157,158,5,101,0,0,158,159,5,97,0,
		0,159,160,5,100,0,0,160,19,1,0,0,0,161,162,5,119,0,0,162,163,5,114,0,0,
		163,164,5,105,0,0,164,165,5,116,0,0,165,166,5,101,0,0,166,21,1,0,0,0,167,
		168,5,110,0,0,168,169,5,101,0,0,169,170,5,119,0,0,170,23,1,0,0,0,171,172,
		5,116,0,0,172,173,5,114,0,0,173,174,5,117,0,0,174,175,5,101,0,0,175,25,
		1,0,0,0,176,177,5,102,0,0,177,178,5,97,0,0,178,179,5,108,0,0,179,180,5,
		115,0,0,180,181,5,101,0,0,181,27,1,0,0,0,182,183,5,115,0,0,183,184,5,119,
		0,0,184,185,5,105,0,0,185,186,5,116,0,0,186,187,5,99,0,0,187,188,5,104,
		0,0,188,29,1,0,0,0,189,190,5,99,0,0,190,191,5,97,0,0,191,192,5,115,0,0,
		192,193,5,101,0,0,193,31,1,0,0,0,194,195,5,100,0,0,195,196,5,101,0,0,196,
		197,5,102,0,0,197,198,5,97,0,0,198,199,5,117,0,0,199,200,5,108,0,0,200,
		201,5,116,0,0,201,33,1,0,0,0,202,203,5,61,0,0,203,35,1,0,0,0,204,205,5,
		43,0,0,205,37,1,0,0,0,206,207,5,45,0,0,207,39,1,0,0,0,208,209,5,42,0,0,
		209,41,1,0,0,0,210,211,5,47,0,0,211,43,1,0,0,0,212,213,5,37,0,0,213,45,
		1,0,0,0,214,215,5,61,0,0,215,216,5,61,0,0,216,47,1,0,0,0,217,218,5,33,
		0,0,218,219,5,61,0,0,219,49,1,0,0,0,220,221,5,60,0,0,221,51,1,0,0,0,222,
		223,5,60,0,0,223,224,5,61,0,0,224,53,1,0,0,0,225,226,5,62,0,0,226,55,1,
		0,0,0,227,228,5,62,0,0,228,229,5,61,0,0,229,57,1,0,0,0,230,231,5,38,0,
		0,231,232,5,38,0,0,232,59,1,0,0,0,233,234,5,124,0,0,234,235,5,124,0,0,
		235,61,1,0,0,0,236,237,5,43,0,0,237,238,5,43,0,0,238,63,1,0,0,0,239,240,
		5,45,0,0,240,241,5,45,0,0,241,65,1,0,0,0,242,243,5,40,0,0,243,67,1,0,0,
		0,244,245,5,41,0,0,245,69,1,0,0,0,246,247,5,123,0,0,247,71,1,0,0,0,248,
		249,5,125,0,0,249,73,1,0,0,0,250,251,5,91,0,0,251,75,1,0,0,0,252,253,5,
		93,0,0,253,77,1,0,0,0,254,255,5,59,0,0,255,79,1,0,0,0,256,257,5,44,0,0,
		257,81,1,0,0,0,258,259,5,46,0,0,259,83,1,0,0,0,260,261,5,58,0,0,261,85,
		1,0,0,0,262,271,5,48,0,0,263,267,7,0,0,0,264,266,3,104,51,0,265,264,1,
		0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,271,1,0,0,0,
		269,267,1,0,0,0,270,262,1,0,0,0,270,263,1,0,0,0,271,87,1,0,0,0,272,274,
		3,104,51,0,273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,1,0,
		0,0,276,277,1,0,0,0,277,279,5,46,0,0,278,280,3,104,51,0,279,278,1,0,0,
		0,280,281,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,89,1,0,0,0,283,286,
		5,39,0,0,284,287,3,106,52,0,285,287,8,1,0,0,286,284,1,0,0,0,286,285,1,
		0,0,0,287,288,1,0,0,0,288,289,5,39,0,0,289,91,1,0,0,0,290,295,5,34,0,0,
		291,294,3,106,52,0,292,294,8,2,0,0,293,291,1,0,0,0,293,292,1,0,0,0,294,
		297,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,295,1,
		0,0,0,298,299,5,34,0,0,299,93,1,0,0,0,300,305,3,102,50,0,301,304,3,102,
		50,0,302,304,3,104,51,0,303,301,1,0,0,0,303,302,1,0,0,0,304,307,1,0,0,
		0,305,303,1,0,0,0,305,306,1,0,0,0,306,95,1,0,0,0,307,305,1,0,0,0,308,310,
		7,3,0,0,309,308,1,0,0,0,310,311,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,
		0,312,313,1,0,0,0,313,314,6,47,0,0,314,97,1,0,0,0,315,316,5,47,0,0,316,
		317,5,47,0,0,317,321,1,0,0,0,318,320,8,4,0,0,319,318,1,0,0,0,320,323,1,
		0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,324,1,0,0,0,323,321,1,0,0,0,
		324,325,6,48,0,0,325,99,1,0,0,0,326,327,5,47,0,0,327,328,5,42,0,0,328,
		329,1,0,0,0,329,330,6,49,1,0,330,331,6,49,0,0,331,101,1,0,0,0,332,333,
		7,5,0,0,333,103,1,0,0,0,334,335,7,6,0,0,335,105,1,0,0,0,336,337,5,92,0,
		0,337,338,7,7,0,0,338,107,1,0,0,0,339,340,5,47,0,0,340,341,5,42,0,0,341,
		342,1,0,0,0,342,343,6,53,1,0,343,344,6,53,0,0,344,109,1,0,0,0,345,346,
		5,42,0,0,346,347,5,47,0,0,347,348,1,0,0,0,348,349,6,54,2,0,349,350,6,54,
		0,0,350,111,1,0,0,0,351,352,9,0,0,0,352,353,1,0,0,0,353,354,6,55,0,0,354,
		113,1,0,0,0,13,0,1,267,270,275,281,286,293,295,303,305,311,321,3,6,0,0,
		5,1,0,4,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace generated
