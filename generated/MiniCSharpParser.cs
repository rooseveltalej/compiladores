//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Volumes/macOs/rooseveltalej/Documents/Compiladores/MiniCSharpParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniCSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, FOR=5, WHILE=6, BREAK=7, RETURN=8, READ=9, 
		WRITE=10, NEW=11, TRUE=12, FALSE=13, SWITCH=14, CASE=15, DEFAULT=16, ASSIGN=17, 
		PLUS=18, MINUS=19, MULT=20, DIV=21, MOD=22, EQUAL=23, NOTEQUAL=24, LT=25, 
		LE=26, GT=27, GE=28, AND=29, OR=30, INC=31, DEC=32, LPAREN=33, RPAREN=34, 
		LBRACE=35, RBRACE=36, LBRACK=37, RBRACK=38, SEMI=39, COMMA=40, DOT=41, 
		COLON=42, INTCONST=43, DOUBLECONST=44, CHARCONST=45, STRINGCONST=46, IDENT=47, 
		WS=48, LINE_COMMENT=49, BLOCK_COMMENT=50, CM_START=51, CM_END=52, CM_TEXT=53;
	public const int
		RULE_program = 0, RULE_varDecl = 1, RULE_classDecl = 2, RULE_methodDecl = 3, 
		RULE_formPars = 4, RULE_type = 5, RULE_statement = 6, RULE_switchCase = 7, 
		RULE_defaultCase = 8, RULE_constant = 9, RULE_block = 10, RULE_actPars = 11, 
		RULE_condition = 12, RULE_condTerm = 13, RULE_condFact = 14, RULE_cast = 15, 
		RULE_expr = 16, RULE_term = 17, RULE_factor = 18, RULE_designator = 19, 
		RULE_number = 20, RULE_relop = 21, RULE_addop = 22, RULE_mulop = 23;
	public static readonly string[] ruleNames = {
		"program", "varDecl", "classDecl", "methodDecl", "formPars", "type", "statement", 
		"switchCase", "defaultCase", "constant", "block", "actPars", "condition", 
		"condTerm", "condFact", "cast", "expr", "term", "factor", "designator", 
		"number", "relop", "addop", "mulop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'for'", "'while'", "'break'", 
		"'return'", "'read'", "'write'", "'new'", "'true'", "'false'", "'switch'", 
		"'case'", "'default'", "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
		"'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'++'", "'--'", 
		"'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", "':'", 
		null, null, null, null, null, null, null, null, null, "'*/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", 
		"READ", "WRITE", "NEW", "TRUE", "FALSE", "SWITCH", "CASE", "DEFAULT", 
		"ASSIGN", "PLUS", "MINUS", "MULT", "DIV", "MOD", "EQUAL", "NOTEQUAL", 
		"LT", "LE", "GT", "GE", "AND", "OR", "INC", "DEC", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "COLON", 
		"INTCONST", "DOUBLECONST", "CHARCONST", "STRINGCONST", "IDENT", "WS", 
		"LINE_COMMENT", "BLOCK_COMMENT", "CM_START", "CM_END", "CM_TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(MiniCSharpParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(CLASS);
			State = 49;
			Match(IDENT);
			State = 50;
			Match(LBRACE);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140737488355334L) != 0)) {
				{
				State = 54;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 51;
					varDecl();
					}
					break;
				case 2:
					{
					State = 52;
					classDecl();
					}
					break;
				case 3:
					{
					State = 53;
					methodDecl();
					}
					break;
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 59;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(MiniCSharpParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(MiniCSharpParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MiniCSharpParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			type();
			State = 62;
			Match(IDENT);
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 63;
				Match(COMMA);
				State = 64;
				Match(IDENT);
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 70;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(MiniCSharpParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(CLASS);
			State = 73;
			Match(IDENT);
			State = 74;
			Match(LBRACE);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENT) {
				{
				{
				State = 75;
				varDecl();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(MiniCSharpParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MiniCSharpParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				{
				State = 83;
				type();
				}
				break;
			case VOID:
				{
				State = 84;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 87;
			Match(IDENT);
			State = 88;
			Match(LPAREN);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 89;
				formPars();
				}
			}

			State = 92;
			Match(RPAREN);
			State = 93;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(MiniCSharpParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(MiniCSharpParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterFormPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitFormPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 8, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			type();
			State = 96;
			Match(IDENT);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 97;
				Match(COMMA);
				State = 98;
				type();
				State = 99;
				Match(IDENT);
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(MiniCSharpParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MiniCSharpParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MiniCSharpParser.RBRACK, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(IDENT);
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 107;
				Match(LBRACK);
				State = 108;
				Match(RBRACK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BreakStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MiniCSharpParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MiniCSharpParser.SEMI, 0); }
		public BreakStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniCSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniCSharpParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(MiniCSharpParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseContext[] switchCase() {
			return GetRuleContexts<SwitchCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseContext switchCase(int i) {
			return GetRuleContext<SwitchCaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCaseContext defaultCase() {
			return GetRuleContext<DefaultCaseContext>(0);
		}
		public SwitchStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MiniCSharpParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MiniCSharpParser.SEMI, 0); }
		public ReadStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniCSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MiniCSharpParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MiniCSharpParser.SEMI, 0); }
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DesignatorStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MiniCSharpParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCSharpParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(MiniCSharpParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(MiniCSharpParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public DesignatorStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterDesignatorStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitDesignatorStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WriteStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MiniCSharpParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MiniCSharpParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MiniCSharpParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public WriteStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterWriteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitWriteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniCSharpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniCSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MiniCSharpParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MiniCSharpParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		int _la;
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				_localctx = new DesignatorStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 111;
				designator();
				State = 121;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASSIGN:
					{
					State = 112;
					Match(ASSIGN);
					State = 113;
					expr();
					}
					break;
				case LPAREN:
					{
					State = 114;
					Match(LPAREN);
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 272687474161664L) != 0)) {
						{
						State = 115;
						actPars();
						}
					}

					State = 118;
					Match(RPAREN);
					}
					break;
				case INC:
					{
					State = 119;
					Match(INC);
					}
					break;
				case DEC:
					{
					State = 120;
					Match(DEC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 123;
				Match(SEMI);
				}
				break;
			case IF:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 125;
				Match(IF);
				State = 126;
				Match(LPAREN);
				State = 127;
				condition();
				State = 128;
				Match(RPAREN);
				State = 129;
				statement();
				State = 132;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 130;
					Match(ELSE);
					State = 131;
					statement();
					}
					break;
				}
				}
				break;
			case FOR:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 134;
				Match(FOR);
				State = 135;
				Match(LPAREN);
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 272687474161664L) != 0)) {
					{
					State = 136;
					expr();
					}
				}

				State = 139;
				Match(SEMI);
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 272687474161664L) != 0)) {
					{
					State = 140;
					condition();
					}
				}

				State = 143;
				Match(SEMI);
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141321603925992L) != 0)) {
					{
					State = 144;
					statement();
					}
				}

				State = 147;
				Match(RPAREN);
				State = 148;
				statement();
				}
				break;
			case WHILE:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 149;
				Match(WHILE);
				State = 150;
				Match(LPAREN);
				State = 151;
				condition();
				State = 152;
				Match(RPAREN);
				State = 153;
				statement();
				}
				break;
			case SWITCH:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 155;
				Match(SWITCH);
				State = 156;
				Match(LPAREN);
				State = 157;
				expr();
				State = 158;
				Match(RPAREN);
				State = 159;
				Match(LBRACE);
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE) {
					{
					{
					State = 160;
					switchCase();
					}
					}
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 166;
					defaultCase();
					}
				}

				State = 169;
				Match(RBRACE);
				}
				break;
			case BREAK:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 171;
				Match(BREAK);
				State = 172;
				Match(SEMI);
				}
				break;
			case RETURN:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 173;
				Match(RETURN);
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 272687474161664L) != 0)) {
					{
					State = 174;
					expr();
					}
				}

				State = 177;
				Match(SEMI);
				}
				break;
			case READ:
				_localctx = new ReadStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 178;
				Match(READ);
				State = 179;
				Match(LPAREN);
				State = 180;
				designator();
				State = 181;
				Match(RPAREN);
				State = 182;
				Match(SEMI);
				}
				break;
			case WRITE:
				_localctx = new WriteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 184;
				Match(WRITE);
				State = 185;
				Match(LPAREN);
				State = 186;
				expr();
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 187;
					Match(COMMA);
					State = 188;
					number();
					}
				}

				State = 191;
				Match(RPAREN);
				State = 192;
				Match(SEMI);
				}
				break;
			case LBRACE:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 194;
				block();
				}
				break;
			case SEMI:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 195;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MiniCSharpParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MiniCSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SwitchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseContext switchCase() {
		SwitchCaseContext _localctx = new SwitchCaseContext(Context, State);
		EnterRule(_localctx, 14, RULE_switchCase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(CASE);
			State = 199;
			constant();
			State = 200;
			Match(COLON);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141321603925992L) != 0)) {
				{
				{
				State = 201;
				statement();
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MiniCSharpParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MiniCSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterDefaultCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitDefaultCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCaseContext defaultCase() {
		DefaultCaseContext _localctx = new DefaultCaseContext(Context, State);
		EnterRule(_localctx, 16, RULE_defaultCase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(DEFAULT);
			State = 208;
			Match(COLON);
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141321603925992L) != 0)) {
				{
				{
				State = 209;
				statement();
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARCONST() { return GetToken(MiniCSharpParser.CHARCONST, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 18, RULE_constant);
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTCONST:
			case DOUBLECONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 215;
				number();
				}
				break;
			case CHARCONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 216;
				Match(CHARCONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(LBRACE);
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141321603925992L) != 0)) {
				{
				State = 222;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 220;
					varDecl();
					}
					break;
				case 2:
					{
					State = 221;
					statement();
					}
					break;
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 227;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterActPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitActPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 22, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			expr();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 230;
				Match(COMMA);
				State = 231;
				expr();
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(MiniCSharpParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(MiniCSharpParser.OR, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 24, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			condTerm();
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 238;
				Match(OR);
				State = 239;
				condTerm();
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MiniCSharpParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MiniCSharpParser.AND, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCondTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCondTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 26, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			condFact();
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 246;
				Match(AND);
				State = 247;
				condFact();
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCondFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCondFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 28, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			expr();
			State = 254;
			relop();
			State = 255;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 30, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(LPAREN);
			State = 258;
			type();
			State = 259;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniCSharpParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 261;
				Match(MINUS);
				}
			}

			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 264;
				cast();
				}
				break;
			}
			State = 267;
			term();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 268;
				addop();
				State = 269;
				term();
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 34, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			factor();
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7340032L) != 0)) {
				{
				{
				State = 277;
				mulop();
				State = 278;
				factor();
				}
				}
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(MiniCSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(MiniCSharpParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MiniCSharpParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MiniCSharpParser.RBRACK, 0); }
		public NewFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterNewFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitNewFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARCONST() { return GetToken(MiniCSharpParser.CHARCONST, 0); }
		public CharFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCharFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCharFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DesignatorFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public DesignatorFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterDesignatorFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitDesignatorFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumberFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterNumberFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitNumberFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGCONST() { return GetToken(MiniCSharpParser.STRINGCONST, 0); }
		public StringFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterStringFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitStringFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		public ParenFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterParenFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitParenFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MiniCSharpParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MiniCSharpParser.FALSE, 0); }
		public BoolFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterBoolFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitBoolFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 36, RULE_factor);
		int _la;
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				_localctx = new DesignatorFactorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 285;
				designator();
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 286;
					Match(LPAREN);
					State = 288;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 272687474161664L) != 0)) {
						{
						State = 287;
						actPars();
						}
					}

					State = 290;
					Match(RPAREN);
					}
				}

				}
				break;
			case INTCONST:
			case DOUBLECONST:
				_localctx = new NumberFactorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				number();
				}
				break;
			case CHARCONST:
				_localctx = new CharFactorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 294;
				Match(CHARCONST);
				}
				break;
			case STRINGCONST:
				_localctx = new StringFactorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 295;
				Match(STRINGCONST);
				}
				break;
			case TRUE:
				_localctx = new BoolFactorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 296;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new BoolFactorContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 297;
				Match(FALSE);
				}
				break;
			case NEW:
				_localctx = new NewFactorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 298;
				Match(NEW);
				State = 299;
				Match(IDENT);
				State = 306;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LPAREN:
					{
					State = 300;
					Match(LPAREN);
					State = 301;
					Match(RPAREN);
					}
					break;
				case LBRACK:
					{
					State = 302;
					Match(LBRACK);
					State = 303;
					expr();
					State = 304;
					Match(RBRACK);
					}
					break;
				case PLUS:
				case MINUS:
				case MULT:
				case DIV:
				case MOD:
				case EQUAL:
				case NOTEQUAL:
				case LT:
				case LE:
				case GT:
				case GE:
				case AND:
				case OR:
				case RPAREN:
				case RBRACK:
				case SEMI:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case LPAREN:
				_localctx = new ParenFactorContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 308;
				Match(LPAREN);
				State = 309;
				expr();
				State = 310;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(MiniCSharpParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(MiniCSharpParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCSharpParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCSharpParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(MiniCSharpParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(MiniCSharpParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(MiniCSharpParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(MiniCSharpParser.RBRACK, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(IDENT);
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || _la==DOT) {
				{
				State = 321;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 315;
					Match(DOT);
					State = 316;
					Match(IDENT);
					}
					break;
				case LBRACK:
					{
					State = 317;
					Match(LBRACK);
					State = 318;
					expr();
					State = 319;
					Match(RBRACK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTCONST() { return GetToken(MiniCSharpParser.INTCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECONST() { return GetToken(MiniCSharpParser.DOUBLECONST, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 40, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			_la = TokenStream.LA(1);
			if ( !(_la==INTCONST || _la==DOUBLECONST) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(MiniCSharpParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(MiniCSharpParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MiniCSharpParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(MiniCSharpParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MiniCSharpParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(MiniCSharpParser.LE, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 42, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 528482304L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MiniCSharpParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniCSharpParser.MINUS, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterAddop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitAddop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 44, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(MiniCSharpParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MiniCSharpParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MiniCSharpParser.MOD, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterMulop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitMulop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 46, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7340032L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,53,335,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,1,0,1,0,1,0,1,0,1,0,5,0,55,8,0,10,0,12,0,58,9,
		0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,66,8,1,10,1,12,1,69,9,1,1,1,1,1,1,2,1,2,
		1,2,1,2,5,2,77,8,2,10,2,12,2,80,9,2,1,2,1,2,1,3,1,3,3,3,86,8,3,1,3,1,3,
		1,3,3,3,91,8,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,102,8,4,10,4,12,
		4,105,9,4,1,5,1,5,1,5,3,5,110,8,5,1,6,1,6,1,6,1,6,1,6,3,6,117,8,6,1,6,
		1,6,1,6,3,6,122,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,133,8,6,1,
		6,1,6,1,6,3,6,138,8,6,1,6,1,6,3,6,142,8,6,1,6,1,6,3,6,146,8,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,162,8,6,10,6,12,6,
		165,9,6,1,6,3,6,168,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,176,8,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,190,8,6,1,6,1,6,1,6,1,6,1,6,
		3,6,197,8,6,1,7,1,7,1,7,1,7,5,7,203,8,7,10,7,12,7,206,9,7,1,8,1,8,1,8,
		5,8,211,8,8,10,8,12,8,214,9,8,1,9,1,9,3,9,218,8,9,1,10,1,10,1,10,5,10,
		223,8,10,10,10,12,10,226,9,10,1,10,1,10,1,11,1,11,1,11,5,11,233,8,11,10,
		11,12,11,236,9,11,1,12,1,12,1,12,5,12,241,8,12,10,12,12,12,244,9,12,1,
		13,1,13,1,13,5,13,249,8,13,10,13,12,13,252,9,13,1,14,1,14,1,14,1,14,1,
		15,1,15,1,15,1,15,1,16,3,16,263,8,16,1,16,3,16,266,8,16,1,16,1,16,1,16,
		1,16,5,16,272,8,16,10,16,12,16,275,9,16,1,17,1,17,1,17,1,17,5,17,281,8,
		17,10,17,12,17,284,9,17,1,18,1,18,1,18,3,18,289,8,18,1,18,3,18,292,8,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,
		307,8,18,1,18,1,18,1,18,1,18,3,18,313,8,18,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,5,19,322,8,19,10,19,12,19,325,9,19,1,20,1,20,1,21,1,21,1,22,1,
		22,1,23,1,23,1,23,0,0,24,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,0,4,1,0,43,44,1,0,23,28,1,0,18,19,1,0,20,22,366,0,
		48,1,0,0,0,2,61,1,0,0,0,4,72,1,0,0,0,6,85,1,0,0,0,8,95,1,0,0,0,10,106,
		1,0,0,0,12,196,1,0,0,0,14,198,1,0,0,0,16,207,1,0,0,0,18,217,1,0,0,0,20,
		219,1,0,0,0,22,229,1,0,0,0,24,237,1,0,0,0,26,245,1,0,0,0,28,253,1,0,0,
		0,30,257,1,0,0,0,32,262,1,0,0,0,34,276,1,0,0,0,36,312,1,0,0,0,38,314,1,
		0,0,0,40,326,1,0,0,0,42,328,1,0,0,0,44,330,1,0,0,0,46,332,1,0,0,0,48,49,
		5,1,0,0,49,50,5,47,0,0,50,56,5,35,0,0,51,55,3,2,1,0,52,55,3,4,2,0,53,55,
		3,6,3,0,54,51,1,0,0,0,54,52,1,0,0,0,54,53,1,0,0,0,55,58,1,0,0,0,56,54,
		1,0,0,0,56,57,1,0,0,0,57,59,1,0,0,0,58,56,1,0,0,0,59,60,5,36,0,0,60,1,
		1,0,0,0,61,62,3,10,5,0,62,67,5,47,0,0,63,64,5,40,0,0,64,66,5,47,0,0,65,
		63,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,70,1,0,0,0,69,
		67,1,0,0,0,70,71,5,39,0,0,71,3,1,0,0,0,72,73,5,1,0,0,73,74,5,47,0,0,74,
		78,5,35,0,0,75,77,3,2,1,0,76,75,1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,
		79,1,0,0,0,79,81,1,0,0,0,80,78,1,0,0,0,81,82,5,36,0,0,82,5,1,0,0,0,83,
		86,3,10,5,0,84,86,5,2,0,0,85,83,1,0,0,0,85,84,1,0,0,0,86,87,1,0,0,0,87,
		88,5,47,0,0,88,90,5,33,0,0,89,91,3,8,4,0,90,89,1,0,0,0,90,91,1,0,0,0,91,
		92,1,0,0,0,92,93,5,34,0,0,93,94,3,20,10,0,94,7,1,0,0,0,95,96,3,10,5,0,
		96,103,5,47,0,0,97,98,5,40,0,0,98,99,3,10,5,0,99,100,5,47,0,0,100,102,
		1,0,0,0,101,97,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,
		104,9,1,0,0,0,105,103,1,0,0,0,106,109,5,47,0,0,107,108,5,37,0,0,108,110,
		5,38,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,11,1,0,0,0,111,121,3,38,19,
		0,112,113,5,17,0,0,113,122,3,32,16,0,114,116,5,33,0,0,115,117,3,22,11,
		0,116,115,1,0,0,0,116,117,1,0,0,0,117,118,1,0,0,0,118,122,5,34,0,0,119,
		122,5,31,0,0,120,122,5,32,0,0,121,112,1,0,0,0,121,114,1,0,0,0,121,119,
		1,0,0,0,121,120,1,0,0,0,122,123,1,0,0,0,123,124,5,39,0,0,124,197,1,0,0,
		0,125,126,5,3,0,0,126,127,5,33,0,0,127,128,3,24,12,0,128,129,5,34,0,0,
		129,132,3,12,6,0,130,131,5,4,0,0,131,133,3,12,6,0,132,130,1,0,0,0,132,
		133,1,0,0,0,133,197,1,0,0,0,134,135,5,5,0,0,135,137,5,33,0,0,136,138,3,
		32,16,0,137,136,1,0,0,0,137,138,1,0,0,0,138,139,1,0,0,0,139,141,5,39,0,
		0,140,142,3,24,12,0,141,140,1,0,0,0,141,142,1,0,0,0,142,143,1,0,0,0,143,
		145,5,39,0,0,144,146,3,12,6,0,145,144,1,0,0,0,145,146,1,0,0,0,146,147,
		1,0,0,0,147,148,5,34,0,0,148,197,3,12,6,0,149,150,5,6,0,0,150,151,5,33,
		0,0,151,152,3,24,12,0,152,153,5,34,0,0,153,154,3,12,6,0,154,197,1,0,0,
		0,155,156,5,14,0,0,156,157,5,33,0,0,157,158,3,32,16,0,158,159,5,34,0,0,
		159,163,5,35,0,0,160,162,3,14,7,0,161,160,1,0,0,0,162,165,1,0,0,0,163,
		161,1,0,0,0,163,164,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,166,168,3,
		16,8,0,167,166,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,5,36,0,
		0,170,197,1,0,0,0,171,172,5,7,0,0,172,197,5,39,0,0,173,175,5,8,0,0,174,
		176,3,32,16,0,175,174,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,197,
		5,39,0,0,178,179,5,9,0,0,179,180,5,33,0,0,180,181,3,38,19,0,181,182,5,
		34,0,0,182,183,5,39,0,0,183,197,1,0,0,0,184,185,5,10,0,0,185,186,5,33,
		0,0,186,189,3,32,16,0,187,188,5,40,0,0,188,190,3,40,20,0,189,187,1,0,0,
		0,189,190,1,0,0,0,190,191,1,0,0,0,191,192,5,34,0,0,192,193,5,39,0,0,193,
		197,1,0,0,0,194,197,3,20,10,0,195,197,5,39,0,0,196,111,1,0,0,0,196,125,
		1,0,0,0,196,134,1,0,0,0,196,149,1,0,0,0,196,155,1,0,0,0,196,171,1,0,0,
		0,196,173,1,0,0,0,196,178,1,0,0,0,196,184,1,0,0,0,196,194,1,0,0,0,196,
		195,1,0,0,0,197,13,1,0,0,0,198,199,5,15,0,0,199,200,3,18,9,0,200,204,5,
		42,0,0,201,203,3,12,6,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,
		0,204,205,1,0,0,0,205,15,1,0,0,0,206,204,1,0,0,0,207,208,5,16,0,0,208,
		212,5,42,0,0,209,211,3,12,6,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,
		1,0,0,0,212,213,1,0,0,0,213,17,1,0,0,0,214,212,1,0,0,0,215,218,3,40,20,
		0,216,218,5,45,0,0,217,215,1,0,0,0,217,216,1,0,0,0,218,19,1,0,0,0,219,
		224,5,35,0,0,220,223,3,2,1,0,221,223,3,12,6,0,222,220,1,0,0,0,222,221,
		1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,
		0,226,224,1,0,0,0,227,228,5,36,0,0,228,21,1,0,0,0,229,234,3,32,16,0,230,
		231,5,40,0,0,231,233,3,32,16,0,232,230,1,0,0,0,233,236,1,0,0,0,234,232,
		1,0,0,0,234,235,1,0,0,0,235,23,1,0,0,0,236,234,1,0,0,0,237,242,3,26,13,
		0,238,239,5,30,0,0,239,241,3,26,13,0,240,238,1,0,0,0,241,244,1,0,0,0,242,
		240,1,0,0,0,242,243,1,0,0,0,243,25,1,0,0,0,244,242,1,0,0,0,245,250,3,28,
		14,0,246,247,5,29,0,0,247,249,3,28,14,0,248,246,1,0,0,0,249,252,1,0,0,
		0,250,248,1,0,0,0,250,251,1,0,0,0,251,27,1,0,0,0,252,250,1,0,0,0,253,254,
		3,32,16,0,254,255,3,42,21,0,255,256,3,32,16,0,256,29,1,0,0,0,257,258,5,
		33,0,0,258,259,3,10,5,0,259,260,5,34,0,0,260,31,1,0,0,0,261,263,5,19,0,
		0,262,261,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,266,3,30,15,0,265,
		264,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,273,3,34,17,0,268,269,
		3,44,22,0,269,270,3,34,17,0,270,272,1,0,0,0,271,268,1,0,0,0,272,275,1,
		0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,33,1,0,0,0,275,273,1,0,0,0,276,
		282,3,36,18,0,277,278,3,46,23,0,278,279,3,36,18,0,279,281,1,0,0,0,280,
		277,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,35,1,0,
		0,0,284,282,1,0,0,0,285,291,3,38,19,0,286,288,5,33,0,0,287,289,3,22,11,
		0,288,287,1,0,0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,292,5,34,0,0,291,
		286,1,0,0,0,291,292,1,0,0,0,292,313,1,0,0,0,293,313,3,40,20,0,294,313,
		5,45,0,0,295,313,5,46,0,0,296,313,5,12,0,0,297,313,5,13,0,0,298,299,5,
		11,0,0,299,306,5,47,0,0,300,301,5,33,0,0,301,307,5,34,0,0,302,303,5,37,
		0,0,303,304,3,32,16,0,304,305,5,38,0,0,305,307,1,0,0,0,306,300,1,0,0,0,
		306,302,1,0,0,0,306,307,1,0,0,0,307,313,1,0,0,0,308,309,5,33,0,0,309,310,
		3,32,16,0,310,311,5,34,0,0,311,313,1,0,0,0,312,285,1,0,0,0,312,293,1,0,
		0,0,312,294,1,0,0,0,312,295,1,0,0,0,312,296,1,0,0,0,312,297,1,0,0,0,312,
		298,1,0,0,0,312,308,1,0,0,0,313,37,1,0,0,0,314,323,5,47,0,0,315,316,5,
		41,0,0,316,322,5,47,0,0,317,318,5,37,0,0,318,319,3,32,16,0,319,320,5,38,
		0,0,320,322,1,0,0,0,321,315,1,0,0,0,321,317,1,0,0,0,322,325,1,0,0,0,323,
		321,1,0,0,0,323,324,1,0,0,0,324,39,1,0,0,0,325,323,1,0,0,0,326,327,7,0,
		0,0,327,41,1,0,0,0,328,329,7,1,0,0,329,43,1,0,0,0,330,331,7,2,0,0,331,
		45,1,0,0,0,332,333,7,3,0,0,333,47,1,0,0,0,37,54,56,67,78,85,90,103,109,
		116,121,132,137,141,145,163,167,175,189,196,204,212,217,222,224,234,242,
		250,262,265,273,282,288,291,306,312,321,323
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace generated
