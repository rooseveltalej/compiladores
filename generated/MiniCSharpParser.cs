//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Bayron/RiderProjects/compiladores/MiniCSharpParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniCSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, FOR=5, WHILE=6, BREAK=7, RETURN=8, READ=9, 
		WRITE=10, NEW=11, TRUE=12, FALSE=13, ASSIGN=14, PLUS=15, MINUS=16, MULT=17, 
		DIV=18, MOD=19, EQUAL=20, NOTEQUAL=21, LT=22, LE=23, GT=24, GE=25, AND=26, 
		OR=27, INC=28, DEC=29, LPAREN=30, RPAREN=31, LBRACE=32, RBRACE=33, LBRACK=34, 
		RBRACK=35, SEMI=36, COMMA=37, DOT=38, INTCONST=39, DOUBLECONST=40, CHARCONST=41, 
		STRINGCONST=42, IDENT=43, WS=44, LINE_COMMENT=45, BLOCK_COMMENT=46, CM_START=47, 
		CM_END=48, CM_TEXT=49;
	public const int
		RULE_program = 0, RULE_varDecl = 1, RULE_classDecl = 2, RULE_methodDecl = 3, 
		RULE_formPars = 4, RULE_type = 5, RULE_statement = 6, RULE_block = 7, 
		RULE_actPars = 8, RULE_condition = 9, RULE_condTerm = 10, RULE_condFact = 11, 
		RULE_cast = 12, RULE_expr = 13, RULE_term = 14, RULE_factor = 15, RULE_designator = 16, 
		RULE_number = 17, RULE_relop = 18, RULE_addop = 19, RULE_mulop = 20;
	public static readonly string[] ruleNames = {
		"program", "varDecl", "classDecl", "methodDecl", "formPars", "type", "statement", 
		"block", "actPars", "condition", "condTerm", "condFact", "cast", "expr", 
		"term", "factor", "designator", "number", "relop", "addop", "mulop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'for'", "'while'", "'break'", 
		"'return'", "'read'", "'write'", "'new'", "'true'", "'false'", "'='", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", "'<='", "'>'", 
		"'>='", "'&&'", "'||'", "'++'", "'--'", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "';'", "','", "'.'", null, null, null, null, null, null, null, 
		null, null, "'*/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", 
		"READ", "WRITE", "NEW", "TRUE", "FALSE", "ASSIGN", "PLUS", "MINUS", "MULT", 
		"DIV", "MOD", "EQUAL", "NOTEQUAL", "LT", "LE", "GT", "GE", "AND", "OR", 
		"INC", "DEC", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
		"SEMI", "COMMA", "DOT", "INTCONST", "DOUBLECONST", "CHARCONST", "STRINGCONST", 
		"IDENT", "WS", "LINE_COMMENT", "BLOCK_COMMENT", "CM_START", "CM_END", 
		"CM_TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(MiniCSharpParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(CLASS);
			State = 43;
			Match(IDENT);
			State = 44;
			Match(LBRACE);
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8796093022214L) != 0)) {
				{
				State = 48;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 45;
					varDecl();
					}
					break;
				case 2:
					{
					State = 46;
					classDecl();
					}
					break;
				case 3:
					{
					State = 47;
					methodDecl();
					}
					break;
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 53;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(MiniCSharpParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(MiniCSharpParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MiniCSharpParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			type();
			State = 56;
			Match(IDENT);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 57;
				Match(COMMA);
				State = 58;
				Match(IDENT);
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 64;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(MiniCSharpParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(CLASS);
			State = 67;
			Match(IDENT);
			State = 68;
			Match(LBRACE);
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENT) {
				{
				{
				State = 69;
				varDecl();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 75;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(MiniCSharpParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MiniCSharpParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				{
				State = 77;
				type();
				}
				break;
			case VOID:
				{
				State = 78;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 81;
			Match(IDENT);
			State = 82;
			Match(LPAREN);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 83;
				formPars();
				}
			}

			State = 86;
			Match(RPAREN);
			State = 87;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(MiniCSharpParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(MiniCSharpParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 8, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			type();
			State = 90;
			Match(IDENT);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 91;
				Match(COMMA);
				State = 92;
				type();
				State = 93;
				Match(IDENT);
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(MiniCSharpParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MiniCSharpParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MiniCSharpParser.RBRACK, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(IDENT);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 101;
				Match(LBRACK);
				State = 102;
				Match(RBRACK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BreakStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MiniCSharpParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MiniCSharpParser.SEMI, 0); }
		public BreakStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniCSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniCSharpParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MiniCSharpParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MiniCSharpParser.SEMI, 0); }
		public ReadStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniCSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MiniCSharpParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MiniCSharpParser.SEMI, 0); }
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DesignatorStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MiniCSharpParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCSharpParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(MiniCSharpParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(MiniCSharpParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public DesignatorStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WriteStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MiniCSharpParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MiniCSharpParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MiniCSharpParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public WriteStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniCSharpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniCSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MiniCSharpParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MiniCSharpParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		int _la;
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				_localctx = new DesignatorStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				designator();
				State = 115;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASSIGN:
					{
					State = 106;
					Match(ASSIGN);
					State = 107;
					expr();
					}
					break;
				case LPAREN:
					{
					State = 108;
					Match(LPAREN);
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17043504052224L) != 0)) {
						{
						State = 109;
						actPars();
						}
					}

					State = 112;
					Match(RPAREN);
					}
					break;
				case INC:
					{
					State = 113;
					Match(INC);
					}
					break;
				case DEC:
					{
					State = 114;
					Match(DEC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 117;
				Match(SEMI);
				}
				break;
			case IF:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				Match(IF);
				State = 120;
				Match(LPAREN);
				State = 121;
				condition();
				State = 122;
				Match(RPAREN);
				State = 123;
				statement();
				State = 126;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 124;
					Match(ELSE);
					State = 125;
					statement();
					}
					break;
				}
				}
				break;
			case FOR:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 128;
				Match(FOR);
				State = 129;
				Match(LPAREN);
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17043504052224L) != 0)) {
					{
					State = 130;
					expr();
					}
				}

				State = 133;
				Match(SEMI);
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17043504052224L) != 0)) {
					{
					State = 134;
					condition();
					}
				}

				State = 137;
				Match(SEMI);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8869107468264L) != 0)) {
					{
					State = 138;
					statement();
					}
				}

				State = 141;
				Match(RPAREN);
				State = 142;
				statement();
				}
				break;
			case WHILE:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 143;
				Match(WHILE);
				State = 144;
				Match(LPAREN);
				State = 145;
				condition();
				State = 146;
				Match(RPAREN);
				State = 147;
				statement();
				}
				break;
			case BREAK:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 149;
				Match(BREAK);
				State = 150;
				Match(SEMI);
				}
				break;
			case RETURN:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 151;
				Match(RETURN);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17043504052224L) != 0)) {
					{
					State = 152;
					expr();
					}
				}

				State = 155;
				Match(SEMI);
				}
				break;
			case READ:
				_localctx = new ReadStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 156;
				Match(READ);
				State = 157;
				Match(LPAREN);
				State = 158;
				designator();
				State = 159;
				Match(RPAREN);
				State = 160;
				Match(SEMI);
				}
				break;
			case WRITE:
				_localctx = new WriteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 162;
				Match(WRITE);
				State = 163;
				Match(LPAREN);
				State = 164;
				expr();
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 165;
					Match(COMMA);
					State = 166;
					number();
					}
				}

				State = 169;
				Match(RPAREN);
				State = 170;
				Match(SEMI);
				}
				break;
			case LBRACE:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 172;
				block();
				}
				break;
			case SEMI:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 173;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(LBRACE);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8869107468264L) != 0)) {
				{
				State = 179;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 177;
					varDecl();
					}
					break;
				case 2:
					{
					State = 178;
					statement();
					}
					break;
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 184;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 16, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			expr();
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 187;
				Match(COMMA);
				State = 188;
				expr();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(MiniCSharpParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(MiniCSharpParser.OR, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 18, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			condTerm();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 195;
				Match(OR);
				State = 196;
				condTerm();
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MiniCSharpParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MiniCSharpParser.AND, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 20, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			condFact();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 203;
				Match(AND);
				State = 204;
				condFact();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 22, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			expr();
			State = 211;
			relop();
			State = 212;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 24, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(LPAREN);
			State = 215;
			type();
			State = 216;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniCSharpParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 218;
				Match(MINUS);
				}
			}

			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 221;
				cast();
				}
				break;
			}
			State = 224;
			term();
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 225;
				addop();
				State = 226;
				term();
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 28, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			factor();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 917504L) != 0)) {
				{
				{
				State = 234;
				mulop();
				State = 235;
				factor();
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(MiniCSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(MiniCSharpParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MiniCSharpParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MiniCSharpParser.RBRACK, 0); }
		public NewFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARCONST() { return GetToken(MiniCSharpParser.CHARCONST, 0); }
		public CharFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DesignatorFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public DesignatorFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumberFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGCONST() { return GetToken(MiniCSharpParser.STRINGCONST, 0); }
		public StringFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		public ParenFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MiniCSharpParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MiniCSharpParser.FALSE, 0); }
		public BoolFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 30, RULE_factor);
		int _la;
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				_localctx = new DesignatorFactorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 242;
				designator();
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 243;
					Match(LPAREN);
					State = 245;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17043504052224L) != 0)) {
						{
						State = 244;
						actPars();
						}
					}

					State = 247;
					Match(RPAREN);
					}
				}

				}
				break;
			case INTCONST:
			case DOUBLECONST:
				_localctx = new NumberFactorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 250;
				number();
				}
				break;
			case CHARCONST:
				_localctx = new CharFactorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 251;
				Match(CHARCONST);
				}
				break;
			case STRINGCONST:
				_localctx = new StringFactorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 252;
				Match(STRINGCONST);
				}
				break;
			case TRUE:
				_localctx = new BoolFactorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 253;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new BoolFactorContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 254;
				Match(FALSE);
				}
				break;
			case NEW:
				_localctx = new NewFactorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 255;
				Match(NEW);
				State = 256;
				Match(IDENT);
				State = 263;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LPAREN:
					{
					State = 257;
					Match(LPAREN);
					State = 258;
					Match(RPAREN);
					}
					break;
				case LBRACK:
					{
					State = 259;
					Match(LBRACK);
					State = 260;
					expr();
					State = 261;
					Match(RBRACK);
					}
					break;
				case PLUS:
				case MINUS:
				case MULT:
				case DIV:
				case MOD:
				case EQUAL:
				case NOTEQUAL:
				case LT:
				case LE:
				case GT:
				case GE:
				case AND:
				case OR:
				case RPAREN:
				case RBRACK:
				case SEMI:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case LPAREN:
				_localctx = new ParenFactorContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 265;
				Match(LPAREN);
				State = 266;
				expr();
				State = 267;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(MiniCSharpParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(MiniCSharpParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCSharpParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCSharpParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(MiniCSharpParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(MiniCSharpParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(MiniCSharpParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(MiniCSharpParser.RBRACK, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(IDENT);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || _la==DOT) {
				{
				State = 278;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 272;
					Match(DOT);
					State = 273;
					Match(IDENT);
					}
					break;
				case LBRACK:
					{
					State = 274;
					Match(LBRACK);
					State = 275;
					expr();
					State = 276;
					Match(RBRACK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTCONST() { return GetToken(MiniCSharpParser.INTCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECONST() { return GetToken(MiniCSharpParser.DOUBLECONST, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 34, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			_la = TokenStream.LA(1);
			if ( !(_la==INTCONST || _la==DOUBLECONST) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(MiniCSharpParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(MiniCSharpParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MiniCSharpParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(MiniCSharpParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MiniCSharpParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(MiniCSharpParser.LE, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 36, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 66060288L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MiniCSharpParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniCSharpParser.MINUS, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 38, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(MiniCSharpParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MiniCSharpParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MiniCSharpParser.MOD, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 40, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 917504L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,49,292,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,0,1,
		0,1,0,1,0,1,0,5,0,49,8,0,10,0,12,0,52,9,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,
		60,8,1,10,1,12,1,63,9,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,71,8,2,10,2,12,2,74,
		9,2,1,2,1,2,1,3,1,3,3,3,80,8,3,1,3,1,3,1,3,3,3,85,8,3,1,3,1,3,1,3,1,4,
		1,4,1,4,1,4,1,4,1,4,5,4,96,8,4,10,4,12,4,99,9,4,1,5,1,5,1,5,3,5,104,8,
		5,1,6,1,6,1,6,1,6,1,6,3,6,111,8,6,1,6,1,6,1,6,3,6,116,8,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,3,6,127,8,6,1,6,1,6,1,6,3,6,132,8,6,1,6,1,6,3,
		6,136,8,6,1,6,1,6,3,6,140,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,3,6,154,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,
		6,168,8,6,1,6,1,6,1,6,1,6,1,6,3,6,175,8,6,1,7,1,7,1,7,5,7,180,8,7,10,7,
		12,7,183,9,7,1,7,1,7,1,8,1,8,1,8,5,8,190,8,8,10,8,12,8,193,9,8,1,9,1,9,
		1,9,5,9,198,8,9,10,9,12,9,201,9,9,1,10,1,10,1,10,5,10,206,8,10,10,10,12,
		10,209,9,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,3,13,220,8,13,
		1,13,3,13,223,8,13,1,13,1,13,1,13,1,13,5,13,229,8,13,10,13,12,13,232,9,
		13,1,14,1,14,1,14,1,14,5,14,238,8,14,10,14,12,14,241,9,14,1,15,1,15,1,
		15,3,15,246,8,15,1,15,3,15,249,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,3,15,264,8,15,1,15,1,15,1,15,1,15,3,15,270,
		8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,5,16,279,8,16,10,16,12,16,282,
		9,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,0,0,21,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,0,4,1,0,39,40,1,0,20,25,1,
		0,15,16,1,0,17,19,320,0,42,1,0,0,0,2,55,1,0,0,0,4,66,1,0,0,0,6,79,1,0,
		0,0,8,89,1,0,0,0,10,100,1,0,0,0,12,174,1,0,0,0,14,176,1,0,0,0,16,186,1,
		0,0,0,18,194,1,0,0,0,20,202,1,0,0,0,22,210,1,0,0,0,24,214,1,0,0,0,26,219,
		1,0,0,0,28,233,1,0,0,0,30,269,1,0,0,0,32,271,1,0,0,0,34,283,1,0,0,0,36,
		285,1,0,0,0,38,287,1,0,0,0,40,289,1,0,0,0,42,43,5,1,0,0,43,44,5,43,0,0,
		44,50,5,32,0,0,45,49,3,2,1,0,46,49,3,4,2,0,47,49,3,6,3,0,48,45,1,0,0,0,
		48,46,1,0,0,0,48,47,1,0,0,0,49,52,1,0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,
		51,53,1,0,0,0,52,50,1,0,0,0,53,54,5,33,0,0,54,1,1,0,0,0,55,56,3,10,5,0,
		56,61,5,43,0,0,57,58,5,37,0,0,58,60,5,43,0,0,59,57,1,0,0,0,60,63,1,0,0,
		0,61,59,1,0,0,0,61,62,1,0,0,0,62,64,1,0,0,0,63,61,1,0,0,0,64,65,5,36,0,
		0,65,3,1,0,0,0,66,67,5,1,0,0,67,68,5,43,0,0,68,72,5,32,0,0,69,71,3,2,1,
		0,70,69,1,0,0,0,71,74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,75,1,0,0,
		0,74,72,1,0,0,0,75,76,5,33,0,0,76,5,1,0,0,0,77,80,3,10,5,0,78,80,5,2,0,
		0,79,77,1,0,0,0,79,78,1,0,0,0,80,81,1,0,0,0,81,82,5,43,0,0,82,84,5,30,
		0,0,83,85,3,8,4,0,84,83,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,0,86,87,5,31,
		0,0,87,88,3,14,7,0,88,7,1,0,0,0,89,90,3,10,5,0,90,97,5,43,0,0,91,92,5,
		37,0,0,92,93,3,10,5,0,93,94,5,43,0,0,94,96,1,0,0,0,95,91,1,0,0,0,96,99,
		1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,9,1,0,0,0,99,97,1,0,0,0,100,103,
		5,43,0,0,101,102,5,34,0,0,102,104,5,35,0,0,103,101,1,0,0,0,103,104,1,0,
		0,0,104,11,1,0,0,0,105,115,3,32,16,0,106,107,5,14,0,0,107,116,3,26,13,
		0,108,110,5,30,0,0,109,111,3,16,8,0,110,109,1,0,0,0,110,111,1,0,0,0,111,
		112,1,0,0,0,112,116,5,31,0,0,113,116,5,28,0,0,114,116,5,29,0,0,115,106,
		1,0,0,0,115,108,1,0,0,0,115,113,1,0,0,0,115,114,1,0,0,0,116,117,1,0,0,
		0,117,118,5,36,0,0,118,175,1,0,0,0,119,120,5,3,0,0,120,121,5,30,0,0,121,
		122,3,18,9,0,122,123,5,31,0,0,123,126,3,12,6,0,124,125,5,4,0,0,125,127,
		3,12,6,0,126,124,1,0,0,0,126,127,1,0,0,0,127,175,1,0,0,0,128,129,5,5,0,
		0,129,131,5,30,0,0,130,132,3,26,13,0,131,130,1,0,0,0,131,132,1,0,0,0,132,
		133,1,0,0,0,133,135,5,36,0,0,134,136,3,18,9,0,135,134,1,0,0,0,135,136,
		1,0,0,0,136,137,1,0,0,0,137,139,5,36,0,0,138,140,3,12,6,0,139,138,1,0,
		0,0,139,140,1,0,0,0,140,141,1,0,0,0,141,142,5,31,0,0,142,175,3,12,6,0,
		143,144,5,6,0,0,144,145,5,30,0,0,145,146,3,18,9,0,146,147,5,31,0,0,147,
		148,3,12,6,0,148,175,1,0,0,0,149,150,5,7,0,0,150,175,5,36,0,0,151,153,
		5,8,0,0,152,154,3,26,13,0,153,152,1,0,0,0,153,154,1,0,0,0,154,155,1,0,
		0,0,155,175,5,36,0,0,156,157,5,9,0,0,157,158,5,30,0,0,158,159,3,32,16,
		0,159,160,5,31,0,0,160,161,5,36,0,0,161,175,1,0,0,0,162,163,5,10,0,0,163,
		164,5,30,0,0,164,167,3,26,13,0,165,166,5,37,0,0,166,168,3,34,17,0,167,
		165,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,5,31,0,0,170,171,5,
		36,0,0,171,175,1,0,0,0,172,175,3,14,7,0,173,175,5,36,0,0,174,105,1,0,0,
		0,174,119,1,0,0,0,174,128,1,0,0,0,174,143,1,0,0,0,174,149,1,0,0,0,174,
		151,1,0,0,0,174,156,1,0,0,0,174,162,1,0,0,0,174,172,1,0,0,0,174,173,1,
		0,0,0,175,13,1,0,0,0,176,181,5,32,0,0,177,180,3,2,1,0,178,180,3,12,6,0,
		179,177,1,0,0,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,
		1,0,0,0,182,184,1,0,0,0,183,181,1,0,0,0,184,185,5,33,0,0,185,15,1,0,0,
		0,186,191,3,26,13,0,187,188,5,37,0,0,188,190,3,26,13,0,189,187,1,0,0,0,
		190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,17,1,0,0,0,193,191,
		1,0,0,0,194,199,3,20,10,0,195,196,5,27,0,0,196,198,3,20,10,0,197,195,1,
		0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,19,1,0,0,0,201,
		199,1,0,0,0,202,207,3,22,11,0,203,204,5,26,0,0,204,206,3,22,11,0,205,203,
		1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,21,1,0,0,0,
		209,207,1,0,0,0,210,211,3,26,13,0,211,212,3,36,18,0,212,213,3,26,13,0,
		213,23,1,0,0,0,214,215,5,30,0,0,215,216,3,10,5,0,216,217,5,31,0,0,217,
		25,1,0,0,0,218,220,5,16,0,0,219,218,1,0,0,0,219,220,1,0,0,0,220,222,1,
		0,0,0,221,223,3,24,12,0,222,221,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,
		0,224,230,3,28,14,0,225,226,3,38,19,0,226,227,3,28,14,0,227,229,1,0,0,
		0,228,225,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,
		27,1,0,0,0,232,230,1,0,0,0,233,239,3,30,15,0,234,235,3,40,20,0,235,236,
		3,30,15,0,236,238,1,0,0,0,237,234,1,0,0,0,238,241,1,0,0,0,239,237,1,0,
		0,0,239,240,1,0,0,0,240,29,1,0,0,0,241,239,1,0,0,0,242,248,3,32,16,0,243,
		245,5,30,0,0,244,246,3,16,8,0,245,244,1,0,0,0,245,246,1,0,0,0,246,247,
		1,0,0,0,247,249,5,31,0,0,248,243,1,0,0,0,248,249,1,0,0,0,249,270,1,0,0,
		0,250,270,3,34,17,0,251,270,5,41,0,0,252,270,5,42,0,0,253,270,5,12,0,0,
		254,270,5,13,0,0,255,256,5,11,0,0,256,263,5,43,0,0,257,258,5,30,0,0,258,
		264,5,31,0,0,259,260,5,34,0,0,260,261,3,26,13,0,261,262,5,35,0,0,262,264,
		1,0,0,0,263,257,1,0,0,0,263,259,1,0,0,0,263,264,1,0,0,0,264,270,1,0,0,
		0,265,266,5,30,0,0,266,267,3,26,13,0,267,268,5,31,0,0,268,270,1,0,0,0,
		269,242,1,0,0,0,269,250,1,0,0,0,269,251,1,0,0,0,269,252,1,0,0,0,269,253,
		1,0,0,0,269,254,1,0,0,0,269,255,1,0,0,0,269,265,1,0,0,0,270,31,1,0,0,0,
		271,280,5,43,0,0,272,273,5,38,0,0,273,279,5,43,0,0,274,275,5,34,0,0,275,
		276,3,26,13,0,276,277,5,35,0,0,277,279,1,0,0,0,278,272,1,0,0,0,278,274,
		1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,33,1,0,0,0,
		282,280,1,0,0,0,283,284,7,0,0,0,284,35,1,0,0,0,285,286,7,1,0,0,286,37,
		1,0,0,0,287,288,7,2,0,0,288,39,1,0,0,0,289,290,7,3,0,0,290,41,1,0,0,0,
		32,48,50,61,72,79,84,97,103,110,115,126,131,135,139,153,167,174,179,181,
		191,199,207,219,222,230,239,245,248,263,269,278,280
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
